# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# -----------------------------
# Step 1: Generate and Save Dataset (Optional)
# -----------------------------
"""
# Parameters for the dataset
np.random.seed(42)  # For reproducibility
num_samples = 100  # Number of data points
min_size = 500      # Minimum house size (sq ft)
max_size = 3500     # Maximum house size (sq ft)
base_price = 50000  # Base price ($)
price_per_sqft = 200  # Price per square foot ($)

# Generate house sizes (randomly distributed between min and max size)
house_sizes = np.random.randint(min_size, max_size, num_samples)

# Generate house prices based on a linear relationship + random noise
noise = np.random.normal(0, 20000, num_samples)  # Add some noise to make it realistic
house_prices = base_price + (price_per_sqft * house_sizes) + noise

# Create a DataFrame
data = pd.DataFrame({
    "House Size (sq ft)": house_sizes,
    "Price ($)": house_prices
})

# Save to CSV
output_file = "house_prices.csv"
data.to_csv(output_file, index=False)

print(f"Test dataset generated and saved as '{output_file}'. Here are the first few rows:")
print(data.head())
"""

# -----------------------------
# Step 2: Load Dataset
# -----------------------------
data = pd.read_csv("house_prices.csv")

# Define features (X) and target (Y)
X = data[["House Size (sq ft)"]]
Y = data["Price ($)"]

# -----------------------------
# Step 3: Train-Test Split
# -----------------------------
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# -----------------------------
# Step 4: Train Linear Regression Model
# -----------------------------
model = LinearRegression()
model.fit(X_train, Y_train)

# -----------------------------
# Step 5: Make Predictions
# -----------------------------
Y_pred = model.predict(X_test)

# -----------------------------
# Step 6: Evaluate the Model
# -----------------------------
# Calculate Mean Squared Error
mse = mean_squared_error(Y_test, Y_pred)
print(f"Mean Squared Error: {mse:.2f}")

# Print Model Coefficients
print(f"Model Coefficient (m): {model.coef_[0]:.2f}")  # Slope of the line
print(f"Model Intercept (b): {model.intercept_:.2f}")  # y-intercept

# -----------------------------
# Step 7: Visualize Results
# -----------------------------

# Scatter plot of actual vs predicted prices
plt.scatter(X_test, Y_test, color="blue", label="Actual Prices")
plt.plot(X_test, Y_pred, color="red", label="Predicted Prices")
plt.xlabel("House Size (sq ft)")
plt.ylabel("Price ($)")
plt.legend()
plt.title("Actual vs Predicted Prices")
plt.show()

# -----------------------------
# Step 8: Residual Analysis
# -----------------------------

# Residuals (Errors)
residuals = Y_test - Y_pred

# Residual plot
plt.scatter(X_test, residuals, color="purple")
plt.axhline(y=0, color="black", linestyle="--")
plt.xlabel("House Size (sq ft)")
plt.ylabel("Residuals")
plt.title("Residual Plot")
plt.show()
